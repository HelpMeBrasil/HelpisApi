using Donation.Application.Contracts;
using Donation.Application.DataTransfer;
using Donation.Domain.Contract;
using Donation.Domain.Entities;
using Donation.Infrastructure.Contract;
using Microsoft.Extensions.Logging;
using System.Threading.Tasks;

namespace Donation.Application.Services
{
    public class RecoveryService : IRecoveryService
    {
        private readonly INotificationService notificationService;
        private readonly IMongoRepository<User> repository;
        private readonly IUserDomainService domainService;
        private readonly ILogger<RecoveryService> logger;

        public RecoveryService(INotificationService notificationService, IMongoRepository<User> repository, IUserDomainService domainService, ILogger<RecoveryService> logger)
        {
            this.notificationService = notificationService;
            this.repository = repository;
            this.domainService = domainService;
            this.logger = logger;
        }

        public async Task SendRecoveryCode(ChangePasswordDTO model)
        {
            // Find the user
            User user = await repository.FindOneAsync(e => e.Username == model.Username);

            if (user is null)
            {
                logger.LogInformation($"User not found on {nameof(SendRecoveryCode)}. | User: {model.Username}.");

                return;
            }

            // Create a new record of recovery code to send
            Recovery recovery = user.GenerateRecoveryCode();

            // Update the user recovery item
            await repository.ReplaceOneAsync(user);

            logger.LogInformation($"Sending recovery code. | User: {model.Username} | Code: {recovery.Code}.");

            //To do send a notification
            _ = Task.Run(() => notificationService.SendVerificationCode(user, recovery.Code, model.NotificationType));
        }

        /// <summary>
        /// Verify the confirmation code sent as notification by SendRecoveryCode method
        /// </summary>
        /// <param name="model"></param>
        /// <returns>RecoveryCode</returns>
        public async Task<Recovery> ConfirmRecoveryCode(ChangePasswordDTO model)
        {
            // Find the user
            User user = await repository.FindOneAsync(e => e.Username == model.Username);

            // Validate inside domain layer
            Recovery recovery = domainService.ValidateRecoveryCode(user, model.ConfirmationCode);

            // Validate and raise domain notifications if it dosen't accept the condition
            if (recovery is null)
            {
                logger.LogInformation($"Confirmation doesn't match. | User: {model.Username} | Code: {model.ConfirmationCode}.");

                return default;
            }

            // update the user data
            await repository.ReplaceOneAsync(user);

            // Return the verification
            return recovery;
        }

        /// <summary>
        /// Change user password using the confirmation generated by ConfirmRecoveryCode method
        /// </summary>
        /// <param name="model"></param>
        /// <returns>bool</returns>
        public async Task<bool> ChangePassword(ChangePasswordDTO model)
        {
            // Find the user
            User user = await repository.FindOneAsync(e => e.Username == model.Username);

            // Change user password
            bool result = domainService.UpdateUserPassword(user, model.RecoveryId, model.Password);

            if (result)
                await repository.ReplaceOneAsync(user);

            logger.LogInformation($"Change password result: {result}. | User: {model.Username}.");

            return result;
        }
    }
}